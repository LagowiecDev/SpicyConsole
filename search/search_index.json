{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SpicyConsole Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the documentation for the SpicyConsole Unity package! SpicyConsole is a versatile console system that allows you to easily create and manage console commands in your Unity projects.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#installing-spicyconsole-from-unitypackage","title":"Installing SpicyConsole from UnityPackage","text":"<ol> <li> <p>Go to the Releases section of the SpicyConsole GitHub repository.</p> </li> <li> <p>Download the latest UnityPackage file available.</p> </li> <li> <p>Open your Unity project.</p> </li> <li> <p>In the Unity Editor, go to <code>Assets</code> &gt; <code>Import Package</code> &gt; <code>Custom Package...</code>.</p> </li> <li> <p>Select the downloaded UnityPackage file.</p> </li> <li> <p>In the Import Unity Package window, review the contents and click <code>Import</code> to add the SpicyConsole assets to your project.</p> </li> </ol>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#creating-a-command","title":"Creating a Command","text":"<p>To create a console command, use the <code>SpicyCommand</code> attribute on a method in any script. The following example demonstrates how to create a simple command named \"command_custom_name\":</p> YourClass.cs<pre><code>using SpicyConsole.Setup;\n\npublic class YourClass : MonoBehaviour\n{\n    [SpicyCommand(\"command_custom_name\")]\n    private void Example(string x)\n    {\n        Debug.Log(x);\n    }\n}\n</code></pre> <p>Now, when you type <code>command_custom_name ExampleMSG</code> in the console during runtime, the <code>Example()</code> method will be executed, logging <code>ExampleMSG</code> as the provided parameter.</p>"},{"location":"#note-script-instance-in-scene","title":"Note: Script Instance in Scene","text":"<p>For SpicyConsole to function correctly, ensure that your custom script, such as <code>YourClass</code>, is attached to a GameObject in your scene during runtime. This custom script instance is crucial for initializing and managing the SpicyConsole system.</p>"},{"location":"#command-syntax","title":"Command Syntax","text":"<p>The <code>SpicyCommand</code> attribute takes a string parameter, which represents the name of the command. The associated method should have the following characteristics:</p> <ul> <li>It must be a non-static method.</li> <li>It can have parameters, which will be filled by the console command arguments.</li> </ul>"},{"location":"#additional-features","title":"Additional Features","text":"<p>SpicyConsole offers additional features to enhance your console experience. Explore the documentation to learn about:</p>"},{"location":"#commands-list","title":"Commands List","text":""},{"location":"#automatic-commands-list-generation","title":"Automatic Commands List Generation","text":"<p>SpicyConsole provides a convenient feature that automatically generates a list of all commands marked with the <code>SpicyCommand</code> attribute during every C# script compilation in Unity. This list is then stored as an asset in the following path: <code>Assets/Settings/ThirdParty/LagowiecDev/SpicyConsole/CommandsList.asset</code> The generated <code>CommandsList.asset</code> file contains information about each command, including its name, associated method, and any additional attributes specified in the script.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li> <p>During the compilation of C# scripts in Unity, SpicyConsole scans for methods with the <code>SpicyCommand</code> attribute.</p> </li> <li> <p>The information about these commands is collected and compiled into the <code>CommandsList.asset</code> file.</p> </li> <li> <p>The asset file is automatically saved in the specified directory for easy access and reference.</p> </li> </ol>"},{"location":"#accessing-the-commands-list","title":"Accessing the Commands List","text":"<p>You can access the generated command list asset in the Unity Editor by navigating to the following path: <code>Assets/Settings/ThirdParty/LagowiecDev/SpicyConsole/CommandsList.asset</code></p>"},{"location":"#manual-commands-list-retrieval","title":"Manual Commands List Retrieval","text":"<p>SpicyConsole provides a manual option to retrieve a list of all commands marked with the <code>SpicyCommand</code> attribute directly from the Unity Editor's top bar.</p> <p>Where you can find the function: <code>ThirdParty/LagowiecDev/SpicyConsole/Get All Commands</code></p> <ol> <li> <p>In the Unity Editor, navigate to the top bar where you find options like \"File,\" \"Edit,\" and others.</p> </li> <li> <p>Look for the \"ThirdParty\" menu.</p> </li> <li> <p>Under \"ThirdParty,\" find and click on \"LagowiecDev.\"</p> </li> <li> <p>Within the \"LagowiecDev\" menu, locate and click on \"SpicyConsole.\"</p> </li> <li> <p>From the dropdown menu, select \"Get All Commands.\"</p> </li> <li> <p>SpicyConsole will generate a list of all commands and display it in the Unity Console or another designated location.</p> </li> </ol> <p>This manual option is useful when you want to explicitly trigger the command list retrieval process. It can be particularly handy for scenarios where automatic compilation may not have occurred, or you want to refresh the command list on-demand.</p> <p>Feel free to use this option to conveniently access and review the commands available in your SpicyConsole-enabled project!</p>"},{"location":"#other","title":"Other","text":"<ul> <li>Parameter types and parsing.</li> <li>Command aliases.</li> <li>Command descriptions and help messages.</li> <li>Customizing the console appearance.</li> </ul>"},{"location":"#conclusion","title":"Conclusion","text":"<p>With SpicyConsole, managing and creating console commands in your Unity project becomes a breeze. Experiment with the provided features and make your game development experience even more enjoyable!</p> <p>For detailed information on each feature, refer to the specific sections in this documentation. If you encounter any issues or have questions, feel free to reach out to the SpicyConsole community or the package developer. Happy coding!</p>"},{"location":"bugs/","title":"Bugs &amp; Issues","text":""},{"location":"bugs/#known-issue-commandlist-asset-reference","title":"Known Issue: CommandList Asset Reference","text":""},{"location":"bugs/#problem-description","title":"Problem Description","text":"<p>There is a known bug in the current version of SpicyConsole where the field for the CommandList asset may not correctly reference the asset after initial import or update.</p>"},{"location":"bugs/#workaround","title":"Workaround","text":"<p>If you encounter this issue, follow these steps to manually set the correct reference for the CommandList asset:</p> <ol> <li> <p>In the Unity Editor, navigate to the project window.</p> </li> <li> <p>Locate the <code>CommandsList.asset</code> file in the following directory:</p> <pre><code>Assets/Settings/ThirdParty/LagowiecDev/SpicyConsole/CommandsList.asset\n</code></pre> </li> <li> <p>Select the <code>CommandsList.asset</code> file.</p> </li> <li> <p>In the Inspector window, find the field that may not be correctly referencing the asset. It might be labeled as \"Command List\" or similar.</p> </li> <li> <p>Click the small circle button or drag the <code>CommandsList.asset</code> file onto the field to set the correct reference.</p> </li> </ol>"},{"location":"bugs/#note","title":"Note","text":"<p>Ensure that the <code>CommandsList.asset</code> file is not moved or renamed after setting the reference, as it may lead to the field losing its connection.</p>"},{"location":"bugs/#future-updates","title":"Future Updates","text":"<p>We are actively working on resolving this bug, and a fix will be included in the upcoming updates of SpicyConsole. Keep an eye on my GitHub repository for the latest releases and bug fixes.</p>"},{"location":"bugs/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you encounter any issues or bugs while using SpicyConsole, we appreciate your help in improving the package. Follow these steps to report bugs on our GitHub repository:</p> <ol> <li>Check Existing Issues:</li> <li> <p>Before reporting a new bug, check the existing issues on GitHub to see if the problem has already been reported.</p> </li> <li> <p>Create a GitHub Account:</p> </li> <li> <p>If you don't already have one, create a GitHub account.</p> </li> <li> <p>Open a New Issue:</p> </li> <li>Navigate to the Issues section of the GitHub repository.</li> <li> <p>Click on the \"New Issue\" button.</p> </li> <li> <p>Provide Detailed Information:</p> </li> <li>In the issue description, provide detailed information about the bug, including steps to reproduce it.</li> <li> <p>Specify the version of SpicyConsole you are using.</p> </li> <li> <p>Include Screenshots or Code Snippets:</p> </li> <li> <p>If applicable, include screenshots or code snippets that help illustrate the issue.</p> </li> <li> <p>Tag the Bug:</p> </li> <li> <p>Use appropriate labels to tag the issue, such as \"bug\" and any other relevant labels.</p> </li> <li> <p>Submit the Issue:</p> </li> <li>Click on the \"Submit new issue\" button to create the bug report.</li> </ol>"},{"location":"bugs/#example-bug-report","title":"Example Bug Report:","text":"Bug Report Example<pre><code>Bug Description:\n[Describe the bug in detail]\n\nSteps to Reproduce:\n\n1. [Step 1]\n2. [Step 2]\n3. [Step 3]\n\nExpected Behavior:\n[Describe what you expected to happen]\n\nActual Behavior:\n[Describe what actually happened]\n\nVersion:\n[Specify the version of SpicyConsole you are using]\n\nScreenshots:\n[Include any relevant screenshots]\n\nAdditional Information:\n[Any other information that might be helpful]\n</code></pre> <p>Your bug report will help us identify and resolve issues more efficiently. We appreciate your contribution to making SpicyConsole better for everyone!</p>"}]}